# -*- coding: utf-8 -*-
"""
Created on Thu Jan 26 12:59:47 2017

@author: Karol
"""

import csv

##############################
# This script has been checked if works properly and fixed 30.12.2018 r. 

#OUTPUT: ID MALE, ID OFFS, SEX OFFS, DAUGHT_OFFSPRING (separate script for SONS_MATES - because for that I need file F1_F2 that doesn't have "NA","#","*"
# So the file containing only sons that have partners assigned)
###########################
# Read a whole CSV to list of lists
# Give it the file name
# Each item in the 'big'/'outer' list is a row of the CSV
# The items within those items are the rows of the CSV
# To access row 5, column 3, type MYLIST[5][3] ("MYLIST" is whatever you've called the thing)
def csvtolistlists(infile):
  with open(infile, 'r') as f:
    outlist = list(list(entry) for entry in csv.reader(f, delimiter = ','))
  
  return outlist

###########################

####################################
# Function to reduce a data set
# Do NOT remove any rows with NAs, or unassigned parent ("*"' "#"") in this script - because I don't exclude single parents in my analyses (see work notebook why)
# Turn P-values to floats
# Remove rows where P-value threshold is not met
# IMPORTANT: remove the headrow first!

def reduce_data_set(DATA, Pthresh=0.75):
  
  # Turn numbers to floats
  for row in DATA:
    row[3] = float(row[3])
    row[7] = float(row[7])
    row[11] = float(row[11])
  
  # Keep only rows with P >= 0.60
  DATA = [row for row in DATA if row[3]>=Pthresh]
  DATA = [row for row in DATA if row[7]>=Pthresh]
  DATA = [row for row in DATA if row[11]>=Pthresh]
  
  return DATA
# I don't exclude single parents

#################################################

#########################################################

# FUNCTION TO CHECK FOR POTENTIAL MISTAKES IN HANDLING 

# Compare each list of offspring, mothers, fathers
# First, a small function to compare the lists and return a list of positional differences if any are found
# ATTENTION!!!! The command to thisfunction is turned off (I HAVE TO CHECK the csv file before operating on it )
def diffcheck(L1, L2):
  # Compare the lists; this function ASSUMES YOU'VE KEPT THE HEAD ROW
  if L1[1:] == L2[1:]:
    # It helps later to be able to return something
    OUT = []
  else:
    # Get a list of positional differences - these are like row numbers
    OUT = [pos for pos in list(range(len(L1))) if L1[pos] != L2[pos]]
  
  return OUT

# Now, the main checking function
# Pass it a full parentage datasheet, with the headrows still on there
# CHECK THAT THE COLUMN NUMBERS ARE THE CORRECT
def check_all(DATA):
  # Get offspring lists - 1st, 5th, and 9th columns in Excel, so 0, 4, 8
  off1 = [entry[0] for entry in DATA]
  off2 = [entry[4] for entry in DATA]
  off3 = [entry[8] for entry in DATA]
  
  # Get dad lists
  dad1 = [entry[1] for entry in DATA]
  dad2 = [entry[5] for entry in DATA]
  dad3 = [entry[9] for entry in DATA]
  
  # Get mum lists
  mum1 = [entry[2] for entry in DATA]
  mum2 = [entry[6] for entry in DATA]
  mum3 = [entry[10] for entry in DATA]
  
  # Make some checks
  # If everything is OK, this should join three empty lists into a single empty list
  offcheck = diffcheck(off1, off2) + diffcheck(off1, off3) + diffcheck(off2, off3)
  if len(offcheck) > 0:
    print("Mismatches in offspring columns. Check the following rows:")
    print(offcheck)
  else:
    print("Offspring lists are the same across runs")
  
  # Check the parents. We expect there to be some mismatches here
  # But we can just gather them all up into one big bundle of bad rows
  # Then we can see if there's anything the script can't handle in its current form
  parentcheck = diffcheck(dad1, dad2) + diffcheck(dad1, dad3) + diffcheck(dad2, dad3) + diffcheck(mum1, mum2) + diffcheck(mum1, mum3) + diffcheck(mum2, mum3)
  parentcheck = list(set(parentcheck))
  parentcheck.sort()
  # We expect this to include the first row, as this is the header row
  if parentcheck[0] == 0:
    parentcheck = parentcheck[1:]
  else:
    pass
  
  # Go and get these bad rows from the dataset
  badrows = []
  for rowN in parentcheck:
    badrows.append(DATA[rowN])
  
  # Now, apply the reduce_data_set() function to this bad data
  # At the end, there should be nothing left
  badrows = reduce_data_set(badrows)
  
  # Is there anything left?
  if len(badrows) > 0:
    print("Problem rows:")
    for entry in badrows:
      print(entry)
  
  else:
    print("No bad rows the script can't handle in its current form")
  
  print("\nPress 'enter' to proceed with rest of script")
  input()

# End of function
########################################################################


P_F1_data = csvtolistlists("Python_HC1_P_F1_mh3_2019-07-23.csv")
F1_F2_data = csvtolistlists("Python_HC1_F1_F2_zbackcr_mh3_2019-07-23.csv") 

############################


#check_all(P_F1_data)
#check_all(F1_F2_data)


############################
P_F1_data_head = P_F1_data[0]
#1: 2nd row to the end of list
P_F1_data = P_F1_data[1:] 

F1_F2_data_head = F1_F2_data[0]
#1: 2nd row to the end of list
F1_F2_data = F1_F2_data[1:] 

# Remove rows with confidence of assignment lower than 0.6
P_F1_data = reduce_data_set(P_F1_data)
F1_F2_data = reduce_data_set(F1_F2_data)

# How many rows in both datasets?
print("{0} rows in P_F1 data".format(len(P_F1_data)))
print("{0} rows in F1_F2 data".format(len(F1_F2_data)))


################################################
## Beginning of function to get progeny of F1-males
################################################

 
# Function to process a single P-generation male
# Return her ID, number of males she mated with, her number of F1 children
def do_male(male_ID, DATA_1=P_F1_data):
   # Get offspring ID and female for every F1 offspring involving that male
  child_list_f = [row[0:3] for row in DATA_1 if male_ID in row]
  
  # Children involved
  offspring = [row[0] for row in child_list_f ]
  #list(set) gives unique offspring
  offspring = list(set(offspring))
  
  
  # Re-make offspring list so that each offspring has the father male ID to the left
  offspring = [[male_ID, offspring_ID] for offspring_ID in offspring]
  
  return offspring

######################################################

# Get list of all males
all_males = [row[1] for row in P_F1_data]
# Reduce it to unique males
unique_males = list(set(all_males))
# Sort the unique males
unique_males.sort()


# Make a blank list for storing data
OUTDATA_m = []
# Go through all unique males...
for m in unique_males:
  # Get their data
  male_data = do_male(m)
  # Stick it on to OUTDATA
  OUTDATA_m += male_data
####
### Make dictionary ###

sex_F1 = csvtolistlists("backcr_HC1_F1_sex_2019-01-04.csv")

sex_dict = {}

for fish in sex_F1:
  d = {fish[0]:fish[1]}
  sex_dict.update(d)

OUTDATA_m = [entry + [sex_dict[entry[1]]] for entry in OUTDATA_m]



###########   F1-offspring  #################
# Reduce the data to only daughters
male_sons = [row for row in OUTDATA_m if "f" not in row]

def do_sons(son_ID, DATA2=F1_F2_data):
  #Gives me F2 offs, F1 dad, F1 mum
  parentage_list_s = [row[0:3] for row in DATA2 if son_ID in row]
  
  #Gives row with babies of F2 fem
  sons_child = [row[0] for row in parentage_list_s]
  #Gives unique list of sons' partners; and len () gives no of all sons' partners
  n_sons_child = len(sons_child)
  
  return n_sons_child


male_sons = [row + [do_sons(row[1])] for row in male_sons]



# Put a header row in to FEM_SONS_DAUGHT
male_sons_head = [["male_ID", "offs_ID", "offs_sex", "sons_offs"]]
male_SONS = male_sons_head + male_sons


# Save the data
with open("HC1_Pmale_SonsOffs_2019-07-24.csv", "w", newline='') as f2:
  writer = csv.writer(f2, delimiter=";")
  writer.writerows(male_SONS)